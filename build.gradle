/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'user' at '10/7/17 12:03 AM' with Gradle 3.2.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'hostmock.Server'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    // jersey-grizzly
    compile 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.22.2'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.22.2'
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

task idlj() << {
    String idlj = "/usr/lib/jvm/java-8-openjdk-amd64/bin/idlj"
    String[][] idls = [
        ["src/main/java", "idl/Hello.idl"],
        ["src/main/java", "idl/Host.idl"]
    ]
    for (item in idls) {
        String dir = item[0]
        String idl = item[1]
        String command = """${idlj}  -td ${dir} -fallTie ${idl}"""

        println command
        String test = command.execute().text
    }
}

compileJava.dependsOn idlj

task rmic(dependsOn: compileJava) << {
    String[] classes = [
        'rmi.HelloImpl'
    ]
    for (classe in classes) {
        String command = """rmic -iiop -classpath ${sourceSets.main.output.classesDir} -d ${sourceSets.main.output.classesDir} ${classe}"""
        println command
        String test = command.execute().text
        print test
    }
}

jar.dependsOn(rmic)
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}
